import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import StandardScaler

# Simulating a dataset of forest fire incidents
data = {
    'Incident': ['Fire_A', 'Fire_B', 'Fire_C', 'Fire_D', 'Fire_E', 'Fire_F', 'Fire_G', 'Fire_H', 'Fire_I', 'Fire_J'],
    'Temperature': [32, 40, 35, 33, 37, 41, 30, 38, 36, 34],  # in Celsius
    'Humidity': [30, 28, 32, 35, 25, 29, 33, 34, 31, 27],  # percentage
    'Wind Speed': [10, 12, 15, 10, 13, 14, 11, 12, 16, 10],  # in km/h
    'Precipitation': [0, 0, 1, 0, 0, 0, 0.5, 1, 0.2, 0],  # in mm
}

# Convert data to a DataFrame
df = pd.DataFrame(data)

# Define the features to use for similarity assessment
features = ['Temperature', 'Humidity', 'Wind Speed', 'Precipitation']

# Standardizing the features to avoid bias towards higher magnitude variables
scaler = StandardScaler()
scaled_features = scaler.fit_transform(df[features])

# Calculate cosine similarity matrix
similarity_matrix = cosine_similarity(scaled_features)

# Convert the similarity matrix to a DataFrame for easier interpretation
similarity_df = pd.DataFrame(similarity_matrix, index=df['Incident'], columns=df['Incident'])

# Query entities of interest (e.g., Fire_A, Fire_B, and Fire_C)
query_fires = ['Fire_A', 'Fire_B', 'Fire_C']

# Function to find top N similar incidents for each query
def find_top_similar(query, top_n=10):
    # Sort incidents by similarity score to the query, excluding the query itself
    top_similar = similarity_df[query].sort_values(ascending=False)[1:top_n+1]
    return top_similar

# Output top 10 similar fires for each query fire
for query in query_fires:
    print(f"Top 10 incidents most similar to {query}:\n")
    print(find_top_s
